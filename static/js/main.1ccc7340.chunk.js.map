{"version":3,"sources":["componentes/AppBar/index.jsx","componentes/AlertDismissible/index.js","componentes/DataTable/index.js","App.js","serviceWorker.js","index.js"],"names":["BarraNavegacao","Navbar","fixed","collapseOnSelect","expand","bg","variant","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","eventKey","AlertDismissible","useState","show","setShow","Alert","Heading","Button","onClick","require","DataTable","props","search","value","length","dataTable","draw","datatable","this","$el","$","el","data","columns","options","destroy","ref","React","Component","App","users","setUsers","searchValue","setSearchValue","dom","title","dataTableRef","createRef","useEffect","fetch","then","response","json","result","Container","Row","style","marginTop","Col","xs","md","lg","sm","Form","Control","type","onChange","e","target","current","autoComplete","placeholder","autoFocus","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1ccc7340.chunk.js","sourcesContent":["import React from 'react'\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\n\nvar BarraNavegacao = () =>(\n<Navbar fixed=\"top\" collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n  <Navbar.Brand href=\"#home\">Admin - Neg√£o do Cinda</Navbar.Brand>\n  <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n  <Navbar.Collapse id=\"responsive-navbar-nav\">\n    <Nav className=\"mr-auto\">\n    </Nav>\n    <Nav>\n      <Nav.Link href=\"#deets\"></Nav.Link>\n      <Nav.Link eventKey={2} href=\"#memes\">\n        \n      </Nav.Link>\n    </Nav>\n  </Navbar.Collapse>\n</Navbar>\n);\n\nexport default BarraNavegacao;","import React, {  useState } from 'react';\nimport Alert from 'react-bootstrap/Alert';\nimport Button from 'react-bootstrap/Button';\n\nfunction AlertDismissible() {\n    const [show, setShow] = useState(true);\n\n    return (\n        <>\n            <Alert show={show} variant=\"success\">\n                <Alert.Heading>\n                    <h1>Cadastros realizados</h1>\n                </Alert.Heading>\n                <p>\n                    Abaixo, todos os cadastros realizados por meio do site https://negaodocinda.com.br\n                </p>\n                <hr />\n                {/* <div className=\"d-flex justify-content-end\">\n                    <Button onClick={() => setShow(false)} variant=\"outline-success\">\n                        Close me ya'll!\n                    </Button>\n                </div> */}\n            </Alert>\n\n            {!show && <Button onClick={() => setShow(true)}>Show Alert</Button>}\n        </>\n    );\n}\n\nexport default AlertDismissible;","import React from 'react';\nimport $ from 'jquery';\nimport 'datatables.net-dt/css/jquery.dataTables.css';\nrequire('datatables.net');\n\nexport default class DataTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.datatable = null;\n  }\n\n  componentDidMount() {\n    this.$el = $(this.el);\n    this.dataTable = this.$el.DataTable({\n      data: this.props.data,\n      columns: this.props.columns,\n      ...this.props.options\n    });\n  }\n\n  componentWillUnmount() {\n    this.dataTable.destroy(true);\n  }\n\n  // connecting search to an external component, optional but shows how to access the API\n  search = value => {\n    if (value.length > 0) {\n      this.dataTable.search(value).draw();\n    }\n    else{\n        this.dataTable.search(\" \").draw();\n    }\n  };\n\n  render() {\n    return <table ref={el => (this.el = el)} />;\n  }\n}\n","import React, { useEffect, useState, createRef } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport BarraNavegacao from './componentes/AppBar';\nimport AlertDismissible from './componentes/AlertDismissible';\nimport DataTable from './componentes/DataTable';\nimport Form from 'react-bootstrap/Form';\n\nfunction App() {\n  const [users, setUsers] = useState([]);\n\n  const [searchValue, setSearchValue] = useState('');\n\n  const [options, setOptions] = useState({\n    dom: 'lrtip'\n    // paging: false,\n    // scrollX: true,\n    // scrollY: '100%',\n    // scrollCollapse: false,\n    // autoWidth: false,\n    // info: false,\n  });\n\n  const [columns, setColumns] = useState([\n    { title: 'NOME', data: 'username' },\n    { title: 'EMAIL', data: 'email' },\n    { title: 'WHATSAPP', data: 'whatsapp' },\n    { title: 'SETOR', data: 'setor' }\n  ]);\n\n  var dataTableRef = createRef();\n\n  var onChangeSearch = e => {\n    const { value } = e.target;\n\n    if (value.length === 0 || value === \" \") {\n      setSearchValue(' ');\n    } else {\n      setSearchValue(value);\n    }\n\n    dataTableRef.current.search(searchValue);\n  };\n\n  useEffect(() => {\n    function buscarDados() {\n      fetch('https://api.negaodocinda.com.br/users')\n        .then(response => {\n          return response.json();\n        })\n        .then(result => {\n          setUsers(result);\n        });\n    }\n    buscarDados();\n  }, []);\n\n  return (\n    <Container>\n      <BarraNavegacao />\n      <Row style={{ marginTop: 70 }}>\n        <Col xs={12} md={12} lg={12} sm={12}>\n          <AlertDismissible />\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n         <Form.Control\n        type=\"search\"\n        value={searchValue}\n        onChange={onChangeSearch}\n        autoComplete={'off'}\n        placeholder=\"Pesquisar ...\"\n        autoFocus\n        className=\"mb-md-2 mb-sm-2 mb-xs-2 mb-lg-2\"\n        /> \n          {users.length > 0 && (\n            <DataTable\n              ref={dataTableRef}\n              data={users}\n              columns={columns}\n              options={options}\n            />\n          )}\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}